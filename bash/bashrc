# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=10000


### History duplicate fix
alias hfix='history -n && history | sort -k2 -k1nr | uniq -f1 | sort -n | cut -c8- > ~/.tmp$$ && history -c && history -r ~/.tmp$$ && history -w && rm ~/.tmp$$'
HISTCONTROL=ignorespace
shopt -s histappend
shopt -s extglob
HISTSIZE=1000
HISTFILESIZE=2000
export HISTIGNORE="!(+(*\ *))"
PROMPT_COMMAND="hfix; $PROMPT_COMMAND"
####### Fix upto here

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# Add wxPython support
#export WXPYTHON2="/opt/wxPython"
#export WXPHOENIX="/opt/Phoenix"
#export PYTHONPATH=$WXPHOENIX
#export LD_LIBRARY_PATH=$PYTHONPATH/lib:/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

#export ANT_HOME="/opt/ant"
#export PATH="$ANT_HOME/bin:$PATH"
if [[ ${HOSTNAME} == "Prakash" ]]
then
    MYROOT=${HOME}/MyRoot
else
    MYROOT=${HOME}/MySlash
fi

#Set vi mode in terminal
EDITOR=vi

set -o vi
bind '"jk":vi-movement-mode'

#XDG Env variables 
export XDG_CONFIG_HOME=${HOME}/.config

# AddMyRoot bin alias
export PATH="${MYROOT}/usr/bin:$PATH"
export LD_LIBRARY_PATH=${MYROOT}/usr/lib:$LD_LIBRARY_PATH
# export my functions
source ${MYROOT}/usr/bin/Functions
source ${MYROOT}/usr/bin/Functions_ne

if [[ ${HOSTNAME} == "Prakash" ]]
then
    #Setup JAVA
    #export JAVA_HOME="/opt/jdk1.8.0_121"
    export JAVA_HOME=/opt/jdk-12.0.1
    export PATH="$JAVA_HOME/bin:$PATH"

    ### Added by the Heroku Toolbelt
    export PATH="/usr/local/heroku/bin:$PATH"
    #ANDROID_HOME
    export ANDROID_HOME="/opt/android-sdk"
    export PATH="$ANDROID_HOME/tools:$PATH"

    #ANDROID_HOME
    export ANDROID_PLATFORM_TOOLS="$ANDROID_HOME/platform-tools"
    export PATH="$ANDROID_PLATFORM_TOOLS:$PATH"
    export GRADLE_HOME=/opt/gradle-5.6.2
    export GRADLE_USER_HOME=${XDG_CONFIG_HOME}/gradle
    export PATH=${GRADLE_HOME}/bin:${PATH}

    #RCLONE HOME
    export RCLONE_HOME="/opt/rclone"
    export PATH="$RCLONE_HOME:$PATH"

    #Zotero home
    export ZOTERO_HOME="/opt/Zotero"
    export PATH="$PATH:$ZOTERO_HOME"

    #mupdf home
    export MUPDF_HOME="/opt/mupdf"
    export PATH="$PATH:$MUPDF_HOME/bin"

    export ROOTSYS=/opt/root614
    #export ROOTSYS=/opt/ROOT7
    export PATH=$ROOTSYS/bin:$PATH
    export LD_LIBRARY_PATH=$ROOTSYS/lib:$LD_LIBRARY_PATH

    export PYTHONPATH=$ROOTSYS/lib:$PYTHONPATH

    #GEANT and CLHEP
    #export CLHEP_BASE_DIR="/opt/CLHEP"
    export G4INSTALL="$MYROOT/opt/GEANT4"
    export NEST_DIR=$MYROOT/opt/nest #TODO see if this is really required
    #export PATH="$CLHEP_BASE_DIR/bin:$G4INSTALL/bin:$PATH"
    export PATH="$G4INSTALL/bin:$PATH"
    #export BOOST_ROOT=${HOME}/MyRoot/usr
    #export BOOST_LIBRARYDIR=${HOME}/MyRoot/usr/lib
    # setup boost, cuz why not
    GCC_INCLUDE_DIR="$MYROOT/usr/include:$GCC_INCLUDE_DIR"


    export PATH=${HOME}/node_modules/.bin:${PATH}

    # Update latex 2018 
    export PATH="/usr/local/texlive/2018/bin/x86_64-linux:$PATH"


    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('${MYROOT}/opt/mic3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "${MYROOT}/opt/mic3/etc/profile.d/conda.sh" ]; then
            . "${MYROOT}/opt/mic3/etc/profile.d/conda.sh"
        else
            export PATH="${MYROOT}/opt/mic3/bin:$PATH"
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<
    conda deactivate
elif [[ ${HOSTNAME} =~ "borax" ]]
then
    source ~/setupapps.sh
fi

